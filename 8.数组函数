 var a=[];//生成一个空数组
var a= ['java','c++','c#'];//生成一个赋值的数组

Array.isArray(a)//判断是否为数组

a.length//获取数组长度
a.length = 0;//将数组清空

a.unshift('x')//在数组首位添加元素(该方法会改变原数组)
[1].concat(a)//连接2个数组(性能比上面快40%)
a.push('x')//在数组末端添加元素(该方法会改变原数组)
a[a.length] = 'x';//在数组末端添加元素(性能比上面快98%)
a.push.apply(a, b)//合并两个数组成员(该方法会改变原数组)

a.join('|')//将所有数组成员组成一个字符串返回(如果不提供参数,默认用逗号分隔)(原数组不改变)

a.shift()//删除第一个元素(该方法会改变原数组)
a.pop()//删除最后一个元素(该方法会改变原数组)
delete a[1]//清除一个数组成员，会形成空位(该方法会改变原数组)

a.reverse()//颠倒数组中元素的顺序(该方法会改变原数组)

a.slice(0, 1)//提取原数组的一部分（第1位）(原数组不改变)
a.splice(5, 2)//删除原数组的一部分（从第6位开始,共2位）(该方法会改变原数组)

a.indexOf("world");//返回指定的数组中首次出现的位置(-1:未找到 0:第1位开始 5:第6位开始 以此类推)

a.sort(function (a, b) {return a - b})//对数组成员进行排序,按照数字的从小到大(该方法会改变原数组)

a.map(function (n) {return n + 1})//数组的所有成员依次调用一个函数,根据函数结果返回一个新数组(原数组不改变)
a.filter(function (elem) {return (elem > 3)})//数组的所有成员依次调用一个函数,返回结果为true的成员组成一个新数组返回(原数组不改变)

//判断变量b是否在数组a中
a.some(function(i){return i == b})

//打乱数组
a.sort(function(){
    return Math.random() - 0.5;
});